mysql> CREATE DATABASE sandwich_shops;
Query OK, 1 row affected (0.00 sec)

mysql> USE sandwich_shops;
Database changed


mysql> CREATE TABLE tastes (
    ->   name VARCHAR(20) NOT NULL,
    ->   filling VARCHAR(20) NOT NULL,
    ->   PRIMARY KEY (name, filling)
    -> );

mysql> CREATE TABLE locations (
    ->   lname VARCHAR(20) PRIMARY KEY,
    ->   phone CHAR(7) NOT NULL,
    ->   address VARCHAR(60) NOT NULL
    -> );

mysql> CREATE TABLE sandwiches (
    ->   location VARCHAR(20) NOT NULL,
    ->   bread VARCHAR(20) NOT NULL,
    ->   filling VARCHAR(20) NOT NULL,
    ->   price DOUBLE(4,2) NOT NULL,
    ->   PRIMARY KEY (location,bread, filling),
    ->   FOREIGN KEY (location) REFERENCES locations (lname)
    ->   ON DELETE CASCADE ON UPDATE CASCADE
    -> );

mysql> INSERT INTO tastes
    -> VALUES( 'Brown', 'Turkey' ),
    -> ( 'Brown', 'Beef' ),
    -> ( 'Brown', 'Ham' ),
    -> ( 'Jones', 'Cheese' ),
    -> ( 'Green', 'Beef' ),
    -> ( 'Green', 'Turkey' ),
    -> ( 'Green', 'Cheese' );

mysql> INSERT INTO locations
    -> VALUES( 'Lincoln', '6834523', 'Lincoln Place' ),
    -> ( 'O\'Neill\'s', '6742134', 'Pearse St' ),
    -> ( 'Old Nag', '7678132', 'Dame St' ),
    -> ( 'Buttery', '7023421', 'College St' );

mysql> INSERT INTO sandwiches
    -> VALUES( 'Lincoln', 'Rye', 'Ham', 1.25),
    -> ( 'O\'Neill\'s', 'White', 'Cheese', 1.20),
    -> ( 'O\'Neill\'s', 'Whole', 'Ham', 1.25),
    -> ( 'Old Nag', 'Rye', 'Beef', 1.35),
    -> ( 'Buttery', 'White', 'Cheese', 1.00 ),
    -> ( 'O\'Neill\'s', 'White', 'Turkey', 1.35 ),
    -> ( 'Buttery', 'White', 'Ham', 1.10 ),
    -> ( 'Lincoln', 'Rye', 'Beef', 1.35 ),
    -> ( 'Lincoln', 'White', 'Ham', 1.30 ),
    -> ( 'Old Nag', 'Rye', 'Ham', 1.40 );


******************Queries**********************
1 - places where Jones can eat( using a nested subquery).
Query ->
SELECT location
FROM sandwiches
WHERE filling = (
  SELECT filling
  FROM tastes
  WHERE name = 'Jones'
);

Output -
+-----------+
| location  |
+-----------+
| Buttery   |
| O'Neill's |
+-----------+

2 - places where Jones can eat( without using a nested subquery).
SELECT location
FROM sandwiches AS s, tastes as t
WHERE t.name = 'Jones' AND s.filling = t.filling ;

Output -
+-----------+
| location  |
+-----------+
| Buttery   |
| O'Neill's |
+-----------+

3 - For each location the number of people who can eat there
Query ->
SELECT location, COUNT(DISTINCT name) AS total
FROM sandwiches, tastes
WHERE sandwiches.filling = tastes.filling
Group By location;

Output -
+-----------+-------+
| location  | Total |
+-----------+-------+
| Buttery   |     3 |
| Lincoln   |     2 |
| O'Neill's |     3 |
| Old Nag   |     2 |
+-----------+-------+
